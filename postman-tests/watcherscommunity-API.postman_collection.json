{
	"info": {
		"_postman_id": "321d8b60-5271-45ac-9ec2-b77c224ace84",
		"name": "watcherscommunity-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "welcome",
			"item": [
				{
					"name": "API is reachable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API up and running\", function(){\r",
									"    pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "/register",
					"item": [
						{
							"name": "200 register new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let result = [];\r",
											"let characters= 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"let charactersLength = characters.length;\r",
											"for ( var i = 0; i < 20; i++ ) {\r",
											"result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\r",
											"}\r",
											"const newEmail= result.join('') + \"@hotmail.com\"\r",
											"pm.environment.set(\"not_registered_user\", newEmail)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User created successfully\", function(){\r",
											"    pm.response.to.have.status(201)\r",
											"    pm.response.to.not.be.error\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('userID');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{not_registered_user}}\",\r\n    \"password\":\"mynew55546\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 register user with short password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"not_registered_user\", 1+`${pm.environment.get(\"not_registered_user\")}`)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User is not registered with short password \", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('status', 'message');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{not_registered_user}}\",\r\n    \"password\":\"short\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "409 trying inserting existed user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User is not registered if user already exists \", function(){\r",
											"    pm.response.to.have.status(409)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('status', 'message');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const postRequest = {\r",
											"  url: 'http://localhost:5002/api/v1/auth/register',\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'X-Foo': 'bar'\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify({  \"email\": \"duplicated@example.com\",\r",
											"  \"password\": \"randompassword\"})\r",
											"  }\r",
											"};\r",
											"pm.sendRequest(postRequest, (error, response) => {\r",
											"  console.log(error ? error : response.json());\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{duplicated_user}}\",\r\n    \"password\":\"randompassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/login",
					"item": [
						{
							"name": "200 login - valid credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"var access_token = JSON.stringify(jsonData[\"access_token\"]) \r",
											"var refresh_token =JSON.stringify(jsonData[\"refresh_token\"])\r",
											"postman.setEnvironmentVariable(\"access_token\", access_token);\r",
											"postman.setEnvironmentVariable(\"refresh_token\", refresh_token);\r",
											"\r",
											"pm.test(\"Login successfully with correct credentials\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys('access_token', 'refresh_token');\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{duplicated_user}}\",\r\n    \"password\":\"randompassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 login - invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User is not logged in with wrong password \", function(){\r",
											"    pm.response.to.have.status(401)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status')\r",
											"    pm.expect(jsonData).to.have.property('message')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{duplicated_user}}\",\r\n    \"password\":\"invalidpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 login - invalid email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User is not logged in with wrong email \", function(){\r",
											"    pm.response.to.have.status(401)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status')\r",
											"    pm.expect(jsonData).to.have.property('message')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"notexistedemail@hotmail.com\",\r\n    \"password\":\"randompassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 login - empty credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User is not logged in with empty credentials \", function(){\r",
											"    pm.response.to.have.status(401)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status')\r",
											"    pm.expect(jsonData).to.have.property('message')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"\",\r\n    \"password\":\"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 login - without password and email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User is not logged in with empty body \", function(){\r",
											"    pm.response.to.have.status(401)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status')\r",
											"    pm.expect(jsonData).to.have.property('message')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "413 paylod too large - very long string",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let result = \"\"\r",
											"for(let i = 0;i<900000;i++){\r",
											"   result += Math.random() * 10\r",
											"}\r",
											"pm.environment.set(\"long_string\", result)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"overloading strings doesn't crash server \", function(){\r",
											"    pm.response.to.have.status(413)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status')\r",
											"    pm.expect(jsonData).to.have.property('message')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": {{long_string}},\r\n    \"password\":{{long_string}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/refresh",
					"item": [
						{
							"name": "401 no refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not refresh tokens with empty body \", function(){\r",
											"    pm.response.to.have.status(401)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status')\r",
											"    pm.expect(jsonData).to.have.property('message')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/refresh",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"refresh"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 new access token created",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Refresh successfully with correct refresh token\", function(){\r",
											"    pm.response.to.have.status(201)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys('access_token', 'refresh_token');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"refresh_token\":{{refresh_token}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/refresh",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"refresh"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 invalid refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not refresh tokens with invalid refresh token \", function(){\r",
											"    pm.response.to.have.status(401)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status')\r",
											"    pm.expect(jsonData).to.have.property('message')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"refresh_token\":\"aearwwerwr\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/v1/auth/refresh",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"refresh"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}