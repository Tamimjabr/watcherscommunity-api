{
	"info": {
		"_postman_id": "321d8b60-5271-45ac-9ec2-b77c224ace84",
		"name": "watcherscommunity-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "welcome",
			"item": [
				{
					"name": "API is reachable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API up and running\", function(){\r",
									"    pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "/register",
					"item": [
						{
							"name": "with register user script",
							"item": [
								{
									"name": "409 trying inserting existed user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"User is not registered if user already exists \", function(){\r",
													"    pm.response.to.have.status(409)\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('status', 'message');\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\":\"{{user_password}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/auth/register",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"auth",
												"register"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const postRequest = {",
											"  url: `${pm.environment.get('base_url')}/api/auth/register`,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email'),",
											"  \"password\": pm.environment.get('user_password')})",
											"  }",
											"};",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : response.json());",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "200 register new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let result = [];\r",
											"let characters= 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"let charactersLength = characters.length;\r",
											"for ( var i = 0; i < 20; i++ ) {\r",
											"result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\r",
											"}\r",
											"const newEmail= result.join('') + \"@hotmail.com\"\r",
											"pm.environment.set(\"not_registered_user\", newEmail)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User created successfully\", function(){\r",
											"    pm.response.to.have.status(201)\r",
											"    pm.response.to.not.be.error\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('userID','links');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{not_registered_user}}\",\r\n    \"password\":\"mynew55546\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{sub_uri}}/auth/register",
									"host": [
										"{{base_url}}{{sub_uri}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 register user with short password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let result = [];\r",
											"let characters= 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"let charactersLength = characters.length;\r",
											"for ( var i = 0; i < 20; i++ ) {\r",
											"result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\r",
											"}\r",
											"const newEmail= result.join('') + \"@hotmail.com\"\r",
											"pm.environment.set(\"not_registered_user\", newEmail)\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User is not registered with short password \", function(){\r",
											"    pm.response.to.have.status(400)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('status', 'message');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{not_registered_user}}\",\r\n    \"password\":\"short\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{sub_uri}}/auth/register",
									"host": [
										"{{base_url}}{{sub_uri}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/login",
					"item": [
						{
							"name": "with register user script",
							"item": [
								{
									"name": "401 login - invalid password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"User is not logged in with wrong password \", function(){\r",
													"    pm.response.to.have.status(401)\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('status')\r",
													"    pm.expect(jsonData).to.have.property('message')\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{duplicated_user}}\",\r\n    \"password\":\"invalidpassword\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/auth/login",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 login - invalid email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"User is not logged in with wrong email \", function(){\r",
													"    pm.response.to.have.status(401)\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('status')\r",
													"    pm.expect(jsonData).to.have.property('message')\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"notexistedemail@hotmail.com\",\r\n    \"password\":\"randompassword\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/auth/login",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 login - empty credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"User is not logged in with empty credentials \", function(){\r",
													"    pm.response.to.have.status(401)\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('status')\r",
													"    pm.expect(jsonData).to.have.property('message')\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\",\r\n    \"password\":\"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/auth/login",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 login - without password and email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"User is not logged in with empty body \", function(){\r",
													"    pm.response.to.have.status(401)\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('status')\r",
													"    pm.expect(jsonData).to.have.property('message')\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/auth/login",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 login - valid credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Login successfully with correct credentials\", function(){\r",
													"    pm.response.to.have.status(200)\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.all.keys('access_token', 'refresh_token','links');\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{user_email}}\",\r\n    \"password\":\"{{user_password}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/auth/login",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const postRequest = {",
											"  url: `${pm.environment.get('base_url')}/api/auth/register`,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email'),",
											"  \"password\": pm.environment.get('user_password')})",
											"  }",
											"};",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : response.json());",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "413 paylod too large - very long string",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let result = \"\"\r",
											"for(let i = 0;i<900000;i++){\r",
											"   result += Math.random() * 10\r",
											"}\r",
											"pm.environment.set(\"long_string\", result)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"overloading strings doesn't crash server \", function(){\r",
											"    pm.response.to.have.status(413)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status')\r",
											"    pm.expect(jsonData).to.have.property('message')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": {{long_string}},\r\n    \"password\":{{long_string}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{sub_uri}}/auth/login",
									"host": [
										"{{base_url}}{{sub_uri}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/refresh",
					"item": [
						{
							"name": "with register + login user script",
							"item": [
								{
									"name": "201 new access token created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Refresh successfully with correct refresh token\", function(){\r",
													"    pm.response.to.have.status(201)\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.all.keys('access_token','links');\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"refresh_token\":\"{{refresh_token}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/auth/refresh",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"auth",
												"refresh"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const postRequest = {",
											"  url: `${pm.environment.get('base_url')}/api/auth/register`,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email'),",
											"  \"password\": pm.environment.get('user_password')})",
											"  }",
											"};",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : response.json());",
											"    // login the user to get tokens",
											"  const postRequest = {",
											"  url: `${pm.environment.get('base_url')}/api/auth/login`,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email'),",
											"  \"password\": pm.environment.get('user_password')})",
											"  }",
											"};",
											"pm.sendRequest(postRequest, (error, response) => {",
											"console.log(error ? error : response.json());",
											"const jsonData = response.json()",
											"const {access_token, refresh_token}= jsonData",
											"pm.environment.set('access_token', access_token)",
											"pm.environment.set('refresh_token',refresh_token)",
											"// get the userID from the token",
											"const payload = access_token.split('.')[1]",
											"const parsed = JSON.parse(atob(payload)) ",
											"console.log(parsed.userID)",
											"pm.environment.set('user_id', parsed.userID)",
											"});",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "401 no refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not refresh tokens with empty body \", function(){\r",
											"    pm.response.to.have.status(401)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status')\r",
											"    pm.expect(jsonData).to.have.property('message')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{sub_uri}}/auth/refresh",
									"host": [
										"{{base_url}}{{sub_uri}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 invalid refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Not refresh tokens with invalid refresh token \", function(){\r",
											"    pm.response.to.have.status(401)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('status')\r",
											"    pm.expect(jsonData).to.have.property('message')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"refresh_token\":\"aearwwerwr\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{sub_uri}}/auth/refresh",
									"host": [
										"{{base_url}}{{sub_uri}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/logout",
					"item": [
						{
							"name": "with register + login user script",
							"item": [
								{
									"name": "204 - logout user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postRequest = {\r",
													"  url: `${pm.environment.get('base_url') + pm.environment.get('sub_uri')}/auth/register`,\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Foo': 'bar'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email_to_logout'),\r",
													"  \"password\": pm.environment.get('user_password_to_logout')})\r",
													"  }\r",
													"};\r",
													"pm.sendRequest(postRequest, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"    // login the user to get tokens\r",
													"  const postRequest = {\r",
													"  url: `${pm.environment.get('base_url') + pm.environment.get('sub_uri')}/auth/login`,\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Foo': 'bar'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email_to_logout'),\r",
													"  \"password\": pm.environment.get('user_password_to_logout')})\r",
													"  }\r",
													"};\r",
													"pm.sendRequest(postRequest, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"  const jsonData = response.json()\r",
													"  const {access_token, refresh_token}= jsonData\r",
													"  pm.environment.set('access_token_to_logout', access_token)\r",
													"  pm.environment.set('refresh_token_to_logout',refresh_token)\r",
													"});\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Logout user successfully with correct access and refresh tokens\", function(){\r",
													"    pm.response.to.have.status(204)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"access_token\":\"{{access_token_to_logout}}\",\r\n    \"refresh_token\":\"{{refresh_token_to_logout}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/auth/logout",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"auth",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - logout invalid access token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postRequest = {\r",
													"  url: `${pm.environment.get('base_url') + pm.environment.get('sub_uri')}/v1/auth/register`,\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Foo': 'bar'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email_to_logout'),\r",
													"  \"password\": pm.environment.get('user_password_to_logout')})\r",
													"  }\r",
													"};\r",
													"pm.sendRequest(postRequest, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"  // login the user to get tokens\r",
													"  const postRequest = {\r",
													"  url: `${pm.environment.get('base_url') + pm.environment.get('sub_uri')}/auth/login`,\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Foo': 'bar'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email_to_logout'),\r",
													"  \"password\": pm.environment.get('user_password_to_logout')})\r",
													"  }\r",
													"};\r",
													"pm.sendRequest(postRequest, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"  const jsonData = response.json()\r",
													"  const {access_token, refresh_token}= jsonData\r",
													"  pm.environment.set('access_token_to_logout', access_token)\r",
													"  pm.environment.set('refresh_token_to_logout',refresh_token)\r",
													"});\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Not logout user with invalid access token\", function(){\r",
													"    pm.response.to.have.status(401)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"access_token\":\"IAMINVALIDACESSTOKEN\",\r\n    \"refresh_token\":\"{{refresh_token_to_logout}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/auth/logout",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"auth",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 logout invalid refresh token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postRequest = {\r",
													"  url: `${pm.environment.get('base_url') + pm.environment.get('sub_uri')}auth/register`,\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Foo': 'bar'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email_to_logout'),\r",
													"  \"password\": pm.environment.get('user_password_to_logout')})\r",
													"  }\r",
													"};\r",
													"pm.sendRequest(postRequest, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"// login the user to get tokens\r",
													"  const postRequest = {\r",
													"  url: `${pm.environment.get('base_url') + pm.environment.get('sub_uri')}/auth/login`,\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Foo': 'bar'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email_to_logout'),\r",
													"  \"password\": pm.environment.get('user_password_to_logout')})\r",
													"  }\r",
													"};\r",
													"pm.sendRequest(postRequest, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"  const jsonData = response.json()\r",
													"  const {access_token, refresh_token}= jsonData\r",
													"  pm.environment.set('access_token_to_logout', access_token)\r",
													"  pm.environment.set('refresh_token_to_logout',refresh_token)\r",
													"});\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Not logout user with invalid refresh token\", function(){\r",
													"    pm.response.to.have.status(401)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"access_token\":\"{{access_token_to_logout}}\",\r\n    \"refresh_token\":\"IAMINVALIDREFRESHTOKEN\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/auth/logout",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"auth",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "403 logout access token from another user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// the second user\r",
													"const secondUserRegRequest = {\r",
													"  url: `${pm.environment.get('base_url') + pm.environment.get('sub_uri')}/auth/register`,\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Foo': 'bar'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify({  \"email\":pm.environment.get('second_user_email_to_logout'),\r",
													"  \"password\": pm.environment.get('second_user_password_to_logout')})\r",
													"  }\r",
													"};\r",
													"pm.sendRequest(secondUserRegRequest, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"// login the user to get tokens\r",
													"  const secondUserLoginRequest = {\r",
													"  url: `${pm.environment.get('base_url') + pm.environment.get('sub_uri')}/auth/login`,\r",
													"  method: 'POST',\r",
													"  header: {\r",
													"    'Content-Type': 'application/json',\r",
													"    'X-Foo': 'bar'\r",
													"  },\r",
													"  body: {\r",
													"    mode: 'raw',\r",
													"    raw: JSON.stringify({  \"email\":pm.environment.get('second_user_email_to_logout'),\r",
													"  \"password\": pm.environment.get('second_user_password_to_logout')})\r",
													"  }\r",
													"};\r",
													"pm.sendRequest(secondUserLoginRequest, (error, response) => {\r",
													"  console.log(error ? error : response.json());\r",
													"  const jsonData = response.json()\r",
													"  const {access_token, refresh_token}= jsonData\r",
													"  pm.environment.set('second_access_token_to_logout', access_token)\r",
													"  pm.environment.set('second_refresh_token_to_logout',refresh_token)\r",
													"});\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Not logout user with access and refresh tokens from different users\", function(){\r",
													"    pm.response.to.have.status(403)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"access_token\":\"{{access_token_to_logout}}\",\r\n    \"refresh_token\":\"{{second_refresh_token_to_logout}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/auth/logout",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"auth",
												"logout"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const postRequest = {",
											"  url: `${pm.environment.get('base_url') + pm.environment.get('sub_uri')}auth/register`,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email_to_logout'),",
											"  \"password\": pm.environment.get('user_password_to_logout')})",
											"  }",
											"};",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : response.json());",
											"// login the user to get tokens",
											"  const postRequest = {",
											"  url: `${pm.environment.get('base_url') + pm.environment.get('sub_uri')}/auth/login`,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email_to_logout'),",
											"  \"password\": pm.environment.get('user_password_to_logout')})",
											"  }",
											"};",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : response.json());",
											"  const jsonData = response.json()",
											"  const {access_token, refresh_token}= jsonData",
											"  pm.environment.set('access_token_to_logout', access_token)",
											"  pm.environment.set('refresh_token_to_logout',refresh_token)",
											"});",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "/users/{id}/profile/preferred-currency",
					"item": [
						{
							"name": "with register + login user script",
							"item": [
								{
									"name": "200 get user preferred currency",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully getting user's preferred currency\", function(){\r",
													"    pm.response.to.have.status(200)\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/users/{{user_id}}/profile/preferred-currency",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"users",
												"{{user_id}}",
												"profile",
												"preferred-currency"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 change currency for user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully change preferred currency with correct userID and accepted currency\", function(){\r",
													"    pm.response.to.have.status(200)\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.all.keys('URL');\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"currency\":\"usd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/users/{{user_id}}/profile/preferred-currency",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"users",
												"{{user_id}}",
												"profile",
												"preferred-currency"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 unsupported currency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"400 trying to change preferred currency with correct userID, but unsupported currency\", function(){\r",
													"    pm.response.to.have.status(400)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"currency\":\"syp\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/users/{{user_id}}/profile/preferred-currency",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"users",
												"{{user_id}}",
												"profile",
												"preferred-currency"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const postRequest = {",
											"  url: `${pm.environment.get('base_url')}/api/auth/register`,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email'),",
											"  \"password\": pm.environment.get('user_password')})",
											"  }",
											"};",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : response.json());",
											"    // login the user to get tokens",
											"  const postRequest = {",
											"  url: `${pm.environment.get('base_url')}/api/auth/login`,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email'),",
											"  \"password\": pm.environment.get('user_password')})",
											"  }",
											"};",
											"pm.sendRequest(postRequest, (error, response) => {",
											"console.log(error ? error : response.json());",
											"const jsonData = response.json()",
											"const {access_token, refresh_token}= jsonData",
											"pm.environment.set('access_token', access_token)",
											"pm.environment.set('refresh_token',refresh_token)",
											"// get the userID from the token",
											"const payload = access_token.split('.')[1]",
											"const parsed = JSON.parse(atob(payload)) ",
											"console.log(parsed.userID)",
											"pm.environment.set('user_id', parsed.userID)",
											"});",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "403 invalid access token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Forbidden, trying change currency with invalid access token\", function(){\r",
											"    pm.response.to.have.status(403)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "iaminvalidacesstoken",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"currency\":\"usd\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{sub_uri}}/users/{{user_id}}/profile/preferred-currency",
									"host": [
										"{{base_url}}{{sub_uri}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"profile",
										"preferred-currency"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 without authorization header",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unauthorized trying to change preferred currency without access token\", function(){\r",
											"    pm.response.to.have.status(401)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"currency\":\"sek\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{sub_uri}}/users/{{user_id}}/profile/preferred-currency",
									"host": [
										"{{base_url}}{{sub_uri}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"profile",
										"preferred-currency"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/user/profile/wallets",
					"item": [
						{
							"name": "with register + login user script",
							"item": [
								{
									"name": "200 get wallets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully getting wallets array for a user\", function(){\r",
													"    pm.response.to.have.status(200)\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.all.keys('wallets');\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/users/{{user_id}}/profile/wallets",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"users",
												"{{user_id}}",
												"profile",
												"wallets"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 add new wallet",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully add a wallet to wallets array for a user\", function(){\r",
													"    pm.response.to.have.status(201)\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.all.keys('URL','walletID');\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"wallet\":\"mywalletidisheres565fd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/users/{{user_id}}/profile/wallets",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"users",
												"{{user_id}}",
												"profile",
												"wallets"
											]
										}
									},
									"response": []
								},
								{
									"name": "204 delete wallet",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successfully delete a wallet from wallets array for a user\", function(){\r",
													"    pm.response.to.have.status(204)\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"wallet\":\"mywalletidishere/s565fd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/users/{{user_id}}/profile/wallets",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"users",
												"{{user_id}}",
												"profile",
												"wallets"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const postRequest = {",
											"  url: `${pm.environment.get('base_url')}/api/auth/register`,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email'),",
											"  \"password\": pm.environment.get('user_password')})",
											"  }",
											"};",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : response.json());",
											"    // login the user to get tokens",
											"  const postRequest = {",
											"  url: `${pm.environment.get('base_url')}/api/auth/login`,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({  \"email\":pm.environment.get('user_email'),",
											"  \"password\": pm.environment.get('user_password')})",
											"  }",
											"};",
											"pm.sendRequest(postRequest, (error, response) => {",
											"console.log(error ? error : response.json());",
											"const jsonData = response.json()",
											"const {access_token, refresh_token}= jsonData",
											"pm.environment.set('access_token', access_token)",
											"pm.environment.set('refresh_token',refresh_token)",
											"// get the userID from the token",
											"const payload = access_token.split('.')[1]",
											"const parsed = JSON.parse(atob(payload)) ",
											"console.log(parsed.userID)",
											"pm.environment.set('user_id', parsed.userID)",
											"});",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "401 get wallets - without authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 getting wallets without authorization header\", function(){\r",
											"    pm.response.to.have.status(401)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}{{sub_uri}}/users/{{user_id}}/profile/wallets",
									"host": [
										"{{base_url}}{{sub_uri}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"profile",
										"wallets"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 get wallets - invalid access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"403 getting wallets with invalid access token\", function(){\r",
											"    pm.response.to.have.status(403)\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "invalidaccesstokenhere",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}{{sub_uri}}/users/{{user_id}}/profile/wallets",
									"host": [
										"{{base_url}}{{sub_uri}}"
									],
									"path": [
										"users",
										"{{user_id}}",
										"profile",
										"wallets"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Webhook",
			"item": [
				{
					"name": "/users/{id}/webhooks/register",
					"item": [
						{
							"name": "with register + login user script",
							"item": [
								{
									"name": "400 - register not supported event",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"400 - Trying to register webhook for not supported event\", function(){\r",
													"    pm.response.to.have.status(400)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{webhook_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"event\":\"newUser\",\r\n    \"url\": \"mywebsite.com/webhook/let-me-know\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/users/{{webhook_user_id}}/webhooks/register",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"users",
												"{{webhook_user_id}}",
												"webhooks",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - register event successfully",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Register webhook for 'LoginAttempt' event successfully\", function(){\r",
													"    pm.response.to.have.status(201)\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.all.keys('message');\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{webhook_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"event\":\"LoginEvent\",\r\n    \"url\": \"{{base_url}}/api\",\r\n    \"secret\":\"kksdafouiwerworeiwerjwebohh#!\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/users/{{webhook_user_id}}/webhooks/register",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"users",
												"{{webhook_user_id}}",
												"webhooks",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - without secret",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"400 registering webhook without secret\", function(){\r",
													"    pm.response.to.have.status(400)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{webhook_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"event\":\"LoginEvent\",\r\n    \"url\": \"{{base_url}}/api\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/users/{{webhook_user_id}}/webhooks/register",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"users",
												"{{webhook_user_id}}",
												"webhooks",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - short secret",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"400 registering webhook with short secret\", function(){\r",
													"    pm.response.to.have.status(400)\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{webhook_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"event\":\"LoginEvent\",\r\n    \"url\": \"{{base_url}}/api\",\r\n    \"secret\":\"short\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}{{sub_uri}}/users/{{webhook_user_id}}/webhooks/register",
											"host": [
												"{{base_url}}{{sub_uri}}"
											],
											"path": [
												"users",
												"{{webhook_user_id}}",
												"webhooks",
												"register"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const postRequest = {",
											"  url: `${pm.environment.get('base_url')}/api/auth/register`,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({  \"email\":pm.environment.get('webhook_user_email'),",
											"  \"password\": pm.environment.get('webhook_user_password')})",
											"  }",
											"};",
											"pm.sendRequest(postRequest, (error, response) => {",
											"  console.log(error ? error : response.json());",
											"    // login the user to get tokens",
											"  const postRequest = {",
											"  url: `${pm.environment.get('base_url')}/api/auth/login`,",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'X-Foo': 'bar'",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({  \"email\":pm.environment.get('webhook_user_email'),",
											"  \"password\": pm.environment.get('webhook_user_password')})",
											"  }",
											"};",
											"pm.sendRequest(postRequest, (error, response) => {",
											"console.log(error ? error : response.json());",
											"const jsonData = response.json()",
											"const {access_token}= jsonData",
											"pm.environment.set('webhook_access_token', access_token)",
											"",
											"// get the userID from the token",
											"const payload = access_token.split('.')[1]",
											"const parsed = JSON.parse(atob(payload)) ",
											"console.log(parsed.userID)",
											"pm.environment.set('webhook_user_id', parsed.userID)",
											"});",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "fire the event - LoginAttempt",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successfully with correct credentials\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.all.keys('access_token', 'refresh_token','links');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{webhook_user_email}}\",\r\n    \"password\":\"{{webhook_user_password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}{{sub_uri}}/auth/login",
									"host": [
										"{{base_url}}{{sub_uri}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}